var Cache, Entry, File, Promise, R;

Promise = require('bluebird');

R = require('ramda');

File = require('./file');

Cache = (function() {
  function Cache() {
    this.files = {};
  }

  Cache.prototype.has = function(requestPath) {
    return this.files[requestPath] != null;
  };

  Cache.prototype.get = function(requestPath) {
    return this.files[requestPath];
  };

  Cache.prototype.update = function(requestPath, entry) {
    this.files[requestPath] = entry;
    return this;
  };

  return Cache;

})();

Entry = (function() {
  function Entry(content, files) {
    this.content = content;
    this.files = files;
  }

  Entry.prototype.isValid = function() {
    return Promise.map(this.files, function(_arg) {
      var mtime, path;
      mtime = _arg.mtime, path = _arg.path;
      return R.pipeP(File.mtime, R.eq(mtime))(path);
    }).then(R.all(R.identity))["catch"](function(err) {
      if (err.cause.code === 'ENOENT') {
        return false;
      } else {
        throw err;
      }
    });
  };

  return Entry;

})();

Cache.Entry = Entry;

module.exports = Cache;
