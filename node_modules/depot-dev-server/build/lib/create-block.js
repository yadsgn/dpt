var File, Promise, R, createBlock, path, through, vfs, _;

path = require('path');

vfs = require('vinyl-fs');

through = require('through');

_ = require('underscore');

R = require('ramda');

Promise = require('bluebird');

File = require('./file');

createBlock = function(dir, blockConfig) {
  var libDir;
  libDir = path.resolve(dir, 'blocks.' + blockConfig.lib);
  return new Promise(function(resolve, reject) {
    return File.exists(path.resolve(libDir, blockConfig.block)).then(function(exists) {
      var streamTemplatesFrom;
      if (exists) {
        return reject(new Error('This block already exists'));
      } else {
        streamTemplatesFrom = function(source) {
          var stream;
          stream = vfs.src(path.resolve(source, '**/*.*'));
          stream.pipe(through(function(_file) {
            var file, textuals;
            file = _file.clone();
            file.path = _.template(file.path)(blockConfig);
            textuals = ['.js', '.less', '.svg', '.html', '.yaml', '.md'];
            if (R.contains(path.extname(file.path), textuals)) {
              source = file.contents.toString('utf8');
              file.contents = new Buffer(_.template(source)(blockConfig));
            }
            return this.queue(file);
          })).pipe(vfs.dest(dir));
          stream.on('error', reject);
          return stream.on('end', function() {
            return resolve(blockConfig);
          });
        };
        return File.withFirstExistent(streamTemplatesFrom)([path.resolve(libDir, '.templates/block'), path.resolve(libDir, '../.templates/block'), path.resolve(__dirname, '../templates/block')]);
      }
    });
  });
};

module.exports = createBlock;
