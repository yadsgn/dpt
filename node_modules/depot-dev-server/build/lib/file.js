var Promise, R, exists, existsAny, findP, fs, fsStat, mtime, withFirstExistent;

fs = require('fs');

Promise = require('bluebird');

R = require('ramda');

fsStat = Promise.promisify(fs.stat);

mtime = R.pipeP(fsStat, R.prop('mtime'), R.invoke('getTime', []));

findP = function(f) {
  return function(xs) {
    return Promise.map(xs, f).then(R.zipWith(function(source, result) {
      return result && source;
    })(xs)).then(R.find(R.identity));
  };
};

exists = function(filePath) {
  return new Promise(function(resolve, reject) {
    return fs.exists(filePath, resolve);
  });
};

withFirstExistent = function(f) {
  return function(filePaths) {
    return findP(exists)(filePaths).then(function(result) {
      if (result != null) {
        return f(result);
      } else {
        throw new Error('None of the paths tried exist:\n' + filePaths.join(',\n'));
      }
    });
  };
};

existsAny = function(filePaths) {
  if (filePaths.length === 0) {
    return Promise.resolve(void 0);
  } else {
    return exists(filePaths[0]).then(function(ex) {
      if (ex) {
        return filePaths[0];
      } else {
        return existsAny(filePaths.slice(1));
      }
    });
  }
};

module.exports = {
  mtime: mtime,
  exists: exists,
  existsAny: existsAny,
  withFirstExistent: withFirstExistent
};
